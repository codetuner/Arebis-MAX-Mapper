<#@ template language="C#" debug="true" inherits="Max.Tools.DomainGenerator.GenerationHostTemplateBase`1[[Max.Tools.DomainGenerator.Model.Mapping, Max.Tools.DomainGenerator.15.0, Version=1.0.0.0, Culture=neutral, PublicKeyToken=122132a8c4d478f7]]" #>
<#@ assembly name="System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ assembly name="System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".g.cs" #>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Runtime.Serialization;
using Max.Domain.Mapping;
<# foreach(var import in Model.Namespaces.Where(ns => !ns.IsPredefined)) { #>
using <#= (import.HasAlias) ? import.Alias + " = " : "" #><#= import.Name #>;
<# } #>
using <#= Model.Namespaces.Single(n => n.Alias == "Contract").Name #>;

namespace <#= Host.LocalNamespace #>
{
    public partial class IdentifierBasedObjectSource : IObjectSource
	{
        private static IDictionary<Type, Func<Object, Object, Boolean>> isMatchExpressions = new Dictionary<Type, Func<Object, Object, Boolean>>();
        private static IDictionary<Type, Func<System.Data.Entity.DbContext, Object, Object>> tryGetStoreObjectExpressions = new Dictionary<Type, Func<System.Data.Entity.DbContext, object, object>>();
        private static IDictionary<Type, Func<System.Data.Entity.DbContext, Object, bool>> isNewObjectExpressions = new Dictionary<Type, Func<System.Data.Entity.DbContext, Object, bool>>();
	
        static IdentifierBasedObjectSource()
        {
<# foreach(var MapClass in Model.Classes.Where(c => !c.IsEnumeration).OrderBy(c => c.ClassName)) { #>
<# 	var identifiers = MapClass.InheritedProperties.Where(p => p.IsIdentifier).ToList(); #>
<# 	if (identifiers.Count > 0) { #>
			isMatchExpressions[typeof(<#= MapClass.ClassName #>)] = ((a, b) => (b is <#= MapClass.SourceType #>)<# foreach(var property in identifiers) { #><# if (property.IsString) { #> && (((String.IsNullOrWhiteSpace(((<#= MapClass.ClassName #>)a).<#= property.Name #>) ? null : ((<#= MapClass.ClassName #>)a).<#= property.Name #>) == (String.IsNullOrWhiteSpace(((<#= MapClass.SourceType #>)b).<#= property.Source #>) ? null : ((<#= MapClass.SourceType #>)b).<#= property.Source #>)) || (String.IsNullOrWhiteSpace(((<#= MapClass.ClassName #>)a).<#= property.Name #>) && String.IsNullOrWhiteSpace(((<#= MapClass.SourceType #>)b).<#= property.Source #>)))<# } else { #> && (((<#= MapClass.ClassName #>)a).<#= property.Name #> == ((<#= MapClass.SourceType #>)b).<#= property.Source #>)<# } /* if isString */ #><# } /* foreach property */ #>);
<# 	} else { #>
			isMatchExpressions[typeof(<#= MapClass.ClassName #>)] = ((a, b) => (b is <#= MapClass.SourceType #>));
<# 	} #>
<# } /* foreach class */ #>

<# foreach(var MapClass in Model.Classes.Where(c => !c.IsEnumeration).OrderBy(c => c.ClassName)) { #>
<# 	var identifiers = MapClass.InheritedProperties.Where(p => p.IsIdentifier).ToList(); #>
<# 	if (identifiers.Count > 0) { #>
			tryGetStoreObjectExpressions[typeof(<#= MapClass.ClassName #>)] = (context, a) => (context.Set<<#= MapClass.SourceType #>>().Find(<# var prefix0 = ""; foreach(var property in identifiers) { #><#= prefix0 #>((<#= MapClass.ClassName #>)a).<#= property.Name #><# prefix0 = ", "; #><# } /* foreach property */ #>));
<# 	} else { #>
			tryGetStoreObjectExpressions[typeof(<#= MapClass.ClassName #>)] = (context, a) => (default(<#= MapClass.SourceType #>));
<# 	} #>
<# } /* foreach class */ #>

<# foreach(var MapClass in Model.Classes.Where(c => !c.IsEnumeration).OrderBy(c => c.ClassName)) { #>
<# if (Convert.ToBoolean(MapClass.Settings.ValueOr("zeroBasedIdentifier", "false"))) { #>
			isNewObjectExpressions[typeof(<#= MapClass.ClassName #>)] = (context, a) => (a) => false)); // (New instances of types having 'zeroBasedIdentifier' mapping property set cannot be identified.)
<# } else { #>
			isNewObjectExpressions[typeof(<#= MapClass.ClassName #>)] = (context, a) => true<# foreach(var property in MapClass.InheritedProperties.Where(p => p.IsIdentifier)) { #><# if (property.IsString) { #> && (String.IsNullOrWhiteSpace(((<#= MapClass.ClassName #>)a).<#= property.Name #>))<# } else { #> && (((<#= MapClass.ClassName #>)a).<#= property.Name #> == default(<#= property.TypeName #>))<# } #><# } #>;
<# } #>
<# } /* foreach class */ #>
        }

		public IdentifierBasedObjectSource(System.Data.Entity.DbContext context)
        {
            this.Context = context;
        }

        public System.Data.Entity.DbContext Context { get; private set; }

		public virtual bool IsMatch(object sourceObject, object storeObject)
		{
            try
            {
                return isMatchExpressions[sourceObject.GetType()](sourceObject, storeObject);
            }
            catch (KeyNotFoundException ex)
            {
                throw new InvalidOperationException(String.Format("The contract type {0} is not part of the model for the current context mapping.", sourceObject.GetType()), ex);
            }
        }

        public virtual TStoreObject TryGetStoreObject<TStoreObject>(object sourceObject) where TStoreObject : class
        {
            try
            {
                if (isNewObjectExpressions[sourceObject.GetType()](this.Context, sourceObject))
					return null;
				else
					return (TStoreObject)tryGetStoreObjectExpressions[sourceObject.GetType()](this.Context, sourceObject);
            }
            catch (KeyNotFoundException ex)
            {
                throw new InvalidOperationException(String.Format("The contract type {0} is not part of the model for the current context mapping.", sourceObject.GetType()), ex);
            }
        }

        public virtual void RegisterAsNewObject(object storeObject)
        {
            Context.Set(GetObjectType(storeObject.GetType())).Add(storeObject);
			this.AfterRegisterAsNewObject(storeObject);
        }

        partial void AfterRegisterAsNewObject(object storeObject);

        public virtual void RegisterAsDeletedObject(object storeObject)
        {
            Context.Set(GetObjectType(storeObject.GetType())).Remove(storeObject);
			this.AfterRegisterAsDeletedObject(storeObject);
        }

        partial void AfterRegisterAsDeletedObject(object storeObject);

        public virtual TStoreObject CreateObject<TStoreObject>(object sourceObject) where TStoreObject : class, new()
        {
            var result = Context.Set<TStoreObject>().Create();
			this.AfterCreateObject<TStoreObject>(sourceObject, result);
			return result;
        }

		partial void AfterCreateObject<TStoreObject>(object sourceObject, TStoreObject result) where TStoreObject : class, new();

		public virtual Type GetObjectType(Type storeObjectType)
        {
#if MAX_EFNAMESPACEV1
            return System.Data.Objects.ObjectContext.GetObjectType(storeObjectType);
#else
			return System.Data.Entity.Core.Objects.ObjectContext.GetObjectType(storeObjectType);
#endif
        }

        public virtual void OnUpdateSystemObject(object sourceObject, object storeObject)
        {
			this.AfterUpdateSystemObject(sourceObject, storeObject);
        }

		partial void AfterUpdateSystemObject(object sourceObject, object storeObject);
	}
}
